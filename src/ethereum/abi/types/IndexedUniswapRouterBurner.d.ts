/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IndexedUniswapRouterBurnerInterface extends ethers.utils.Interface {
  functions: {
    "burnAndSwapForExactETH(address,uint256,address[],uint256)": FunctionFragment;
    "burnAndSwapForExactTokens(address,uint256,address[],uint256)": FunctionFragment;
    "burnExactAndSwapForETH(address,uint256,address[],uint256)": FunctionFragment;
    "burnExactAndSwapForTokens(address,uint256,address[],uint256)": FunctionFragment;
    "burnForAllTokensAndSwapForETH(address,uint256[],address[],uint256,uint256)": FunctionFragment;
    "burnForAllTokensAndSwapForTokens(address,uint256[],address[],uint256,address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnAndSwapForExactETH",
    values: [string, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAndSwapForExactTokens",
    values: [string, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnExactAndSwapForETH",
    values: [string, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnExactAndSwapForTokens",
    values: [string, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnForAllTokensAndSwapForETH",
    values: [string, BigNumberish[], string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnForAllTokensAndSwapForTokens",
    values: [
      string,
      BigNumberish[],
      string[],
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "burnAndSwapForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAndSwapForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnExactAndSwapForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnExactAndSwapForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnForAllTokensAndSwapForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnForAllTokensAndSwapForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export class IndexedUniswapRouterBurner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IndexedUniswapRouterBurnerInterface;

  functions: {
    burnAndSwapForExactETH(
      indexPool: string,
      poolAmountInMax: BigNumberish,
      path: string[],
      ethAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnAndSwapForExactTokens(
      indexPool: string,
      poolAmountInMax: BigNumberish,
      path: string[],
      tokenAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnExactAndSwapForETH(
      indexPool: string,
      poolAmountIn: BigNumberish,
      path: string[],
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnExactAndSwapForTokens(
      indexPool: string,
      poolAmountIn: BigNumberish,
      path: string[],
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnForAllTokensAndSwapForETH(
      indexPool: string,
      minAmountsOut: BigNumberish[],
      intermediaries: string[],
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnForAllTokensAndSwapForTokens(
      indexPool: string,
      minAmountsOut: BigNumberish[],
      intermediaries: string[],
      poolAmountIn: BigNumberish,
      tokenOut: string,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  burnAndSwapForExactETH(
    indexPool: string,
    poolAmountInMax: BigNumberish,
    path: string[],
    ethAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnAndSwapForExactTokens(
    indexPool: string,
    poolAmountInMax: BigNumberish,
    path: string[],
    tokenAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnExactAndSwapForETH(
    indexPool: string,
    poolAmountIn: BigNumberish,
    path: string[],
    minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnExactAndSwapForTokens(
    indexPool: string,
    poolAmountIn: BigNumberish,
    path: string[],
    minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnForAllTokensAndSwapForETH(
    indexPool: string,
    minAmountsOut: BigNumberish[],
    intermediaries: string[],
    poolAmountIn: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnForAllTokensAndSwapForTokens(
    indexPool: string,
    minAmountsOut: BigNumberish[],
    intermediaries: string[],
    poolAmountIn: BigNumberish,
    tokenOut: string,
    minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    burnAndSwapForExactETH(
      indexPool: string,
      poolAmountInMax: BigNumberish,
      path: string[],
      ethAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnAndSwapForExactTokens(
      indexPool: string,
      poolAmountInMax: BigNumberish,
      path: string[],
      tokenAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnExactAndSwapForETH(
      indexPool: string,
      poolAmountIn: BigNumberish,
      path: string[],
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnExactAndSwapForTokens(
      indexPool: string,
      poolAmountIn: BigNumberish,
      path: string[],
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnForAllTokensAndSwapForETH(
      indexPool: string,
      minAmountsOut: BigNumberish[],
      intermediaries: string[],
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnForAllTokensAndSwapForTokens(
      indexPool: string,
      minAmountsOut: BigNumberish[],
      intermediaries: string[],
      poolAmountIn: BigNumberish,
      tokenOut: string,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    burnAndSwapForExactETH(
      indexPool: string,
      poolAmountInMax: BigNumberish,
      path: string[],
      ethAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnAndSwapForExactTokens(
      indexPool: string,
      poolAmountInMax: BigNumberish,
      path: string[],
      tokenAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnExactAndSwapForETH(
      indexPool: string,
      poolAmountIn: BigNumberish,
      path: string[],
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnExactAndSwapForTokens(
      indexPool: string,
      poolAmountIn: BigNumberish,
      path: string[],
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnForAllTokensAndSwapForETH(
      indexPool: string,
      minAmountsOut: BigNumberish[],
      intermediaries: string[],
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnForAllTokensAndSwapForTokens(
      indexPool: string,
      minAmountsOut: BigNumberish[],
      intermediaries: string[],
      poolAmountIn: BigNumberish,
      tokenOut: string,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    burnAndSwapForExactETH(
      indexPool: string,
      poolAmountInMax: BigNumberish,
      path: string[],
      ethAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnAndSwapForExactTokens(
      indexPool: string,
      poolAmountInMax: BigNumberish,
      path: string[],
      tokenAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnExactAndSwapForETH(
      indexPool: string,
      poolAmountIn: BigNumberish,
      path: string[],
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnExactAndSwapForTokens(
      indexPool: string,
      poolAmountIn: BigNumberish,
      path: string[],
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnForAllTokensAndSwapForETH(
      indexPool: string,
      minAmountsOut: BigNumberish[],
      intermediaries: string[],
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnForAllTokensAndSwapForTokens(
      indexPool: string,
      minAmountsOut: BigNumberish[],
      intermediaries: string[],
      poolAmountIn: BigNumberish,
      tokenOut: string,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
