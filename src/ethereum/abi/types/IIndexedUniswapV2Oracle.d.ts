/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IIndexedUniswapV2OracleInterface extends ethers.utils.Interface {
  functions: {
    "canUpdatePrice(address)": FunctionFragment;
    "canUpdatePrices(address[])": FunctionFragment;
    "computeAverageEthForTokens(address[],uint256[],uint256,uint256)": FunctionFragment;
    "computeAverageEthPrice(address,uint256,uint256)": FunctionFragment;
    "computeAverageEthPrices(address[],uint256,uint256)": FunctionFragment;
    "computeAverageTokenPrice(address,uint256,uint256)": FunctionFragment;
    "computeAverageTokenPrices(address[],uint256,uint256)": FunctionFragment;
    "computeAverageTokensForEth(address[],uint256[],uint256,uint256)": FunctionFragment;
    "computeTwoWayAveragePrice(address,uint256,uint256)": FunctionFragment;
    "computeTwoWayAveragePrices(address[],uint256,uint256)": FunctionFragment;
    "getPriceObservationInWindow(address,uint256)": FunctionFragment;
    "getPriceObservationsInRange(address,uint256,uint256)": FunctionFragment;
    "hasPriceObservationInWindow(address,uint256)": FunctionFragment;
    "updatePrice(address)": FunctionFragment;
    "updatePrices(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canUpdatePrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canUpdatePrices",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAverageEthForTokens",
    values: [string[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAverageEthPrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAverageEthPrices",
    values: [string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAverageTokenPrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAverageTokenPrices",
    values: [string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAverageTokensForEth",
    values: [string[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTwoWayAveragePrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTwoWayAveragePrices",
    values: [string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceObservationInWindow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceObservationsInRange",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPriceObservationInWindow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updatePrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updatePrices",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "canUpdatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canUpdatePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAverageEthForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAverageEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAverageEthPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAverageTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAverageTokenPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAverageTokensForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTwoWayAveragePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTwoWayAveragePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceObservationInWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceObservationsInRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPriceObservationInWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrices",
    data: BytesLike
  ): Result;

  events: {};
}

export class IIndexedUniswapV2Oracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IIndexedUniswapV2OracleInterface;

  functions: {
    canUpdatePrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canUpdatePrices(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    "computeAverageEthForTokens(address[],uint256[],uint256,uint256)"(
      tokens: string[],
      tokenAmounts: BigNumberish[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "computeAverageEthForTokens(address,uint256,uint256,uint256)"(
      token: string,
      tokenAmount: BigNumberish,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeAverageEthPrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { _x: BigNumber }]>;

    computeAverageEthPrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[([BigNumber] & { _x: BigNumber })[]]>;

    computeAverageTokenPrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { _x: BigNumber }]>;

    computeAverageTokenPrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[([BigNumber] & { _x: BigNumber })[]]>;

    "computeAverageTokensForEth(address[],uint256[],uint256,uint256)"(
      tokens: string[],
      wethAmounts: BigNumberish[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "computeAverageTokensForEth(address,uint256,uint256,uint256)"(
      token: string,
      wethAmount: BigNumberish,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeTwoWayAveragePrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          priceAverage: BigNumber;
          ethPriceAverage: BigNumber;
        }
      ]
    >;

    computeTwoWayAveragePrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber] & {
          priceAverage: BigNumber;
          ethPriceAverage: BigNumber;
        })[]
      ]
    >;

    getPriceObservationInWindow(
      token: string,
      priceKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, BigNumber, BigNumber] & {
          timestamp: number;
          priceCumulativeLast: BigNumber;
          ethPriceCumulativeLast: BigNumber;
        }
      ]
    >;

    getPriceObservationsInRange(
      token: string,
      timeFrom: BigNumberish,
      timeTo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, BigNumber, BigNumber] & {
          timestamp: number;
          priceCumulativeLast: BigNumber;
          ethPriceCumulativeLast: BigNumber;
        })[]
      ] & {
        prices: ([number, BigNumber, BigNumber] & {
          timestamp: number;
          priceCumulativeLast: BigNumber;
          ethPriceCumulativeLast: BigNumber;
        })[];
      }
    >;

    hasPriceObservationInWindow(
      token: string,
      priceKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updatePrice(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePrices(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  canUpdatePrice(token: string, overrides?: CallOverrides): Promise<boolean>;

  canUpdatePrices(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  "computeAverageEthForTokens(address[],uint256[],uint256,uint256)"(
    tokens: string[],
    tokenAmounts: BigNumberish[],
    minTimeElapsed: BigNumberish,
    maxTimeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "computeAverageEthForTokens(address,uint256,uint256,uint256)"(
    token: string,
    tokenAmount: BigNumberish,
    minTimeElapsed: BigNumberish,
    maxTimeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeAverageEthPrice(
    token: string,
    minTimeElapsed: BigNumberish,
    maxTimeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { _x: BigNumber }>;

  computeAverageEthPrices(
    tokens: string[],
    minTimeElapsed: BigNumberish,
    maxTimeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([BigNumber] & { _x: BigNumber })[]>;

  computeAverageTokenPrice(
    token: string,
    minTimeElapsed: BigNumberish,
    maxTimeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { _x: BigNumber }>;

  computeAverageTokenPrices(
    tokens: string[],
    minTimeElapsed: BigNumberish,
    maxTimeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([BigNumber] & { _x: BigNumber })[]>;

  "computeAverageTokensForEth(address[],uint256[],uint256,uint256)"(
    tokens: string[],
    wethAmounts: BigNumberish[],
    minTimeElapsed: BigNumberish,
    maxTimeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "computeAverageTokensForEth(address,uint256,uint256,uint256)"(
    token: string,
    wethAmount: BigNumberish,
    minTimeElapsed: BigNumberish,
    maxTimeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeTwoWayAveragePrice(
    token: string,
    minTimeElapsed: BigNumberish,
    maxTimeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      priceAverage: BigNumber;
      ethPriceAverage: BigNumber;
    }
  >;

  computeTwoWayAveragePrices(
    tokens: string[],
    minTimeElapsed: BigNumberish,
    maxTimeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber] & {
      priceAverage: BigNumber;
      ethPriceAverage: BigNumber;
    })[]
  >;

  getPriceObservationInWindow(
    token: string,
    priceKey: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      timestamp: number;
      priceCumulativeLast: BigNumber;
      ethPriceCumulativeLast: BigNumber;
    }
  >;

  getPriceObservationsInRange(
    token: string,
    timeFrom: BigNumberish,
    timeTo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([number, BigNumber, BigNumber] & {
      timestamp: number;
      priceCumulativeLast: BigNumber;
      ethPriceCumulativeLast: BigNumber;
    })[]
  >;

  hasPriceObservationInWindow(
    token: string,
    priceKey: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updatePrice(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePrices(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canUpdatePrice(token: string, overrides?: CallOverrides): Promise<boolean>;

    canUpdatePrices(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    "computeAverageEthForTokens(address[],uint256[],uint256,uint256)"(
      tokens: string[],
      tokenAmounts: BigNumberish[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "computeAverageEthForTokens(address,uint256,uint256,uint256)"(
      token: string,
      tokenAmount: BigNumberish,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAverageEthPrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _x: BigNumber }>;

    computeAverageEthPrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([BigNumber] & { _x: BigNumber })[]>;

    computeAverageTokenPrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _x: BigNumber }>;

    computeAverageTokenPrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([BigNumber] & { _x: BigNumber })[]>;

    "computeAverageTokensForEth(address[],uint256[],uint256,uint256)"(
      tokens: string[],
      wethAmounts: BigNumberish[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "computeAverageTokensForEth(address,uint256,uint256,uint256)"(
      token: string,
      wethAmount: BigNumberish,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTwoWayAveragePrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        priceAverage: BigNumber;
        ethPriceAverage: BigNumber;
      }
    >;

    computeTwoWayAveragePrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & {
        priceAverage: BigNumber;
        ethPriceAverage: BigNumber;
      })[]
    >;

    getPriceObservationInWindow(
      token: string,
      priceKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        timestamp: number;
        priceCumulativeLast: BigNumber;
        ethPriceCumulativeLast: BigNumber;
      }
    >;

    getPriceObservationsInRange(
      token: string,
      timeFrom: BigNumberish,
      timeTo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([number, BigNumber, BigNumber] & {
        timestamp: number;
        priceCumulativeLast: BigNumber;
        ethPriceCumulativeLast: BigNumber;
      })[]
    >;

    hasPriceObservationInWindow(
      token: string,
      priceKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePrice(token: string, overrides?: CallOverrides): Promise<boolean>;

    updatePrices(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;
  };

  filters: {};

  estimateGas: {
    canUpdatePrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUpdatePrices(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAverageEthForTokens(address[],uint256[],uint256,uint256)"(
      tokens: string[],
      tokenAmounts: BigNumberish[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAverageEthForTokens(address,uint256,uint256,uint256)"(
      token: string,
      tokenAmount: BigNumberish,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAverageEthPrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAverageEthPrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAverageTokenPrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAverageTokenPrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAverageTokensForEth(address[],uint256[],uint256,uint256)"(
      tokens: string[],
      wethAmounts: BigNumberish[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAverageTokensForEth(address,uint256,uint256,uint256)"(
      token: string,
      wethAmount: BigNumberish,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTwoWayAveragePrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTwoWayAveragePrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceObservationInWindow(
      token: string,
      priceKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceObservationsInRange(
      token: string,
      timeFrom: BigNumberish,
      timeTo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPriceObservationInWindow(
      token: string,
      priceKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePrice(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePrices(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canUpdatePrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canUpdatePrices(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeAverageEthForTokens(address[],uint256[],uint256,uint256)"(
      tokens: string[],
      tokenAmounts: BigNumberish[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeAverageEthForTokens(address,uint256,uint256,uint256)"(
      token: string,
      tokenAmount: BigNumberish,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAverageEthPrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAverageEthPrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAverageTokenPrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAverageTokenPrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeAverageTokensForEth(address[],uint256[],uint256,uint256)"(
      tokens: string[],
      wethAmounts: BigNumberish[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeAverageTokensForEth(address,uint256,uint256,uint256)"(
      token: string,
      wethAmount: BigNumberish,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTwoWayAveragePrice(
      token: string,
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTwoWayAveragePrices(
      tokens: string[],
      minTimeElapsed: BigNumberish,
      maxTimeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceObservationInWindow(
      token: string,
      priceKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceObservationsInRange(
      token: string,
      timeFrom: BigNumberish,
      timeTo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPriceObservationInWindow(
      token: string,
      priceKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePrice(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePrices(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
