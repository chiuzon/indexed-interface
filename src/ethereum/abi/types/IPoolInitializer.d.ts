/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPoolInitializerInterface extends ethers.utils.Interface {
  functions: {
    "claimTokens()": FunctionFragment;
    "contributeTokens(address,uint256,uint256)": FunctionFragment;
    "finish()": FunctionFragment;
    "getCreditForTokens(address,uint256)": FunctionFragment;
    "getCreditOf(address)": FunctionFragment;
    "getDesiredAmount(address)": FunctionFragment;
    "getDesiredAmounts(address[])": FunctionFragment;
    "getDesiredTokens()": FunctionFragment;
    "getTotalCredit()": FunctionFragment;
    "initialize(address,address[],uint256[])": FunctionFragment;
    "isFinished()": FunctionFragment;
    "updatePrices()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributeTokens",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "finish", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCreditForTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getCreditOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDesiredAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDesiredAmounts",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDesiredTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCredit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinished",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrices",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreditForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDesiredAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDesiredAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDesiredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFinished", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrices",
    data: BytesLike
  ): Result;

  events: {
    "TokensContributed(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokensContributed"): EventFragment;
}

export class IPoolInitializer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolInitializerInterface;

  functions: {
    "claimTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimTokens(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimTokens(address[])"(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "contributeTokens(address,uint256,uint256)"(
      token: string,
      amountIn: BigNumberish,
      minimumCredit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "contributeTokens(address[],uint256[],uint256)"(
      tokens: string[],
      amountsIn: BigNumberish[],
      minimumCredit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finish(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCreditForTokens(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreditOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDesiredAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDesiredAmounts(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getDesiredTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getTotalCredit(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      poolAddress: string,
      tokens: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isFinished(overrides?: CallOverrides): Promise<[boolean]>;

    updatePrices(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "claimTokens()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimTokens(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimTokens(address[])"(
    accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "contributeTokens(address,uint256,uint256)"(
    token: string,
    amountIn: BigNumberish,
    minimumCredit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "contributeTokens(address[],uint256[],uint256)"(
    tokens: string[],
    amountsIn: BigNumberish[],
    minimumCredit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finish(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCreditForTokens(
    token: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreditOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getDesiredAmount(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDesiredAmounts(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getDesiredTokens(overrides?: CallOverrides): Promise<string[]>;

  getTotalCredit(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    poolAddress: string,
    tokens: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isFinished(overrides?: CallOverrides): Promise<boolean>;

  updatePrices(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "claimTokens()"(overrides?: CallOverrides): Promise<void>;

    "claimTokens(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimTokens(address[])"(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "contributeTokens(address,uint256,uint256)"(
      token: string,
      amountIn: BigNumberish,
      minimumCredit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contributeTokens(address[],uint256[],uint256)"(
      tokens: string[],
      amountsIn: BigNumberish[],
      minimumCredit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finish(overrides?: CallOverrides): Promise<void>;

    getCreditForTokens(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDesiredAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDesiredAmounts(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getDesiredTokens(overrides?: CallOverrides): Promise<string[]>;

    getTotalCredit(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      poolAddress: string,
      tokens: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isFinished(overrides?: CallOverrides): Promise<boolean>;

    updatePrices(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    TokensContributed(
      from?: null,
      token?: null,
      amount?: null,
      credit?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; token: string; amount: BigNumber; credit: BigNumber }
    >;
  };

  estimateGas: {
    "claimTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimTokens(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimTokens(address[])"(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "contributeTokens(address,uint256,uint256)"(
      token: string,
      amountIn: BigNumberish,
      minimumCredit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "contributeTokens(address[],uint256[],uint256)"(
      tokens: string[],
      amountsIn: BigNumberish[],
      minimumCredit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finish(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCreditForTokens(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDesiredAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDesiredAmounts(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDesiredTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalCredit(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      poolAddress: string,
      tokens: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isFinished(overrides?: CallOverrides): Promise<BigNumber>;

    updatePrices(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "claimTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimTokens(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimTokens(address[])"(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "contributeTokens(address,uint256,uint256)"(
      token: string,
      amountIn: BigNumberish,
      minimumCredit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "contributeTokens(address[],uint256[],uint256)"(
      tokens: string[],
      amountsIn: BigNumberish[],
      minimumCredit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finish(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCreditForTokens(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDesiredAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDesiredAmounts(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDesiredTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalCredit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      poolAddress: string,
      tokens: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isFinished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePrices(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
