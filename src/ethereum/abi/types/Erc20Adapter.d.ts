/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface Erc20AdapterInterface extends ethers.utils.Interface {
  functions: {
    "availableLiquidity()": FunctionFragment;
    "balanceUnderlying()": FunctionFragment;
    "balanceWrapped()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getAPR()": FunctionFragment;
    "getHypotheticalAPR(int256)": FunctionFragment;
    "getRevenueBreakdown()": FunctionFragment;
    "name()": FunctionFragment;
    "toUnderlyingAmount(uint256)": FunctionFragment;
    "toWrappedAmount(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "underlying()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawUnderlying(uint256)": FunctionFragment;
    "withdrawUnderlyingUpTo(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "availableLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceWrapped",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAPR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalAPR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevenueBreakdown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toUnderlyingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toWrappedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnderlyingUpTo",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevenueBreakdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toUnderlyingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toWrappedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnderlyingUpTo",
    data: BytesLike
  ): Result;

  events: {};
}

export class Erc20Adapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Erc20AdapterInterface;

  functions: {
    availableLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceUnderlying(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceWrapped(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAPR(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHypotheticalAPR(
      liquidityDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRevenueBreakdown(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { assets: string[]; aprs: BigNumber[] }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    toUnderlyingAmount(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toWrappedAmount(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUnderlying(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUnderlyingUpTo(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  availableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  balanceUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  balanceWrapped(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amountUnderlying: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAPR(overrides?: CallOverrides): Promise<BigNumber>;

  getHypotheticalAPR(
    liquidityDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRevenueBreakdown(
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]] & { assets: string[]; aprs: BigNumber[] }>;

  name(overrides?: CallOverrides): Promise<string>;

  toUnderlyingAmount(
    tokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toWrappedAmount(
    underlyingAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amountToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUnderlying(
    amountUnderlying: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUnderlyingUpTo(
    amountUnderlying: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    availableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    balanceUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    balanceWrapped(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAPR(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAPR(
      liquidityDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevenueBreakdown(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { assets: string[]; aprs: BigNumber[] }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    toUnderlyingAmount(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toWrappedAmount(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    withdraw(
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawUnderlying(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawUnderlyingUpTo(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    availableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    balanceUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    balanceWrapped(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAPR(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAPR(
      liquidityDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevenueBreakdown(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    toUnderlyingAmount(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toWrappedAmount(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUnderlying(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUnderlyingUpTo(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceWrapped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAPR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHypotheticalAPR(
      liquidityDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevenueBreakdown(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toUnderlyingAmount(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toWrappedAmount(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnderlying(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnderlyingUpTo(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
